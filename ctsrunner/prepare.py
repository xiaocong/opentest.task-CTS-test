#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Install cts assistanct apks and update settings.
"""

import sys
import os
from uiautomator import device as d

from .download import command, androidVersion


CTSDELEGATING = 'android-cts/repository/testcases/CtsDelegatingAccessibilityService.apk'
CTSADMIN = 'android-cts/repository/testcases/CtsDeviceAdmin.apk'
CTSCONSOLE = 'android-cts/tools/cts-tradefed'
COPYMEDIA = 'cts_media/copy_media.sh'


def setupDelegating():
    install(CTSDELEGATING)


def disableVerifyApps():
    command('adb shell am start -a android.settings.SECURITY_SETTINGS')
    verify_apps = 'Disallow or warn before installation of apps that may cause harm'
    d(className='android.widget.ListView', scrollable=True).scroll.vert.to(text=verify_apps)
    if d(text=verify_apps).right(className='android.widget.CheckBox').checked:
        print('Uncheck %s.' % verify_apps)
        d(text=verify_apps).right(className='android.widget.CheckBox').click()
    else:
        print('%s already unchecked!' % verify_apps)
    d.press.back()
    d.press.home()


def setupAdmin():
    install(CTSADMIN)
    command('adb shell am start -a android.settings.SECURITY_SETTINGS')
    d(className='android.widget.ListView',
      scrollable=True).scroll.vert.to(text="Device administrators")
    d(text="Device administrators").click()

    texts = ['android.deviceadmin.cts.CtsDeviceAdminReceiver',
             'android.deviceadmin.cts.CtsDeviceAdminReceiver2',
             'android.deviceadmin.cts.CtsDeviceAdminDeactivatedReceiver']
    for text in texts:
        if d(text=text).right(className='android.widget.CheckBox').checked:
            print('%s already checked!' % text)
        else:
            print('Check %s.' % text)
            d(text=text).right(className='android.widget.CheckBox').click()
            d(text='Activate').click()
    d.press.back()
    d.press.back()
    d.press.home()


def setupDevOptions():
    command('adb shell am start -a android.settings.APPLICATION_DEVELOPMENT_SETTINGS')
    for check in ['Screen will never sleep while charging', 'Allow mock locations']:
        d(className='android.widget.ListView', scrollable=True).scroll.vert.to(text=check, resourceId='android:id/summary')
        if d(text=check, resourceId='android:id/summary').right(className='android.widget.CheckBox').checked:
            print('%s already checked!' % check)
        else:
            print('Check %s.' % check)
            d(text=check, resourceId='android:id/summary').right(className='android.widget.CheckBox').click()
    d.press.back()
    d.press.home()


def install(apk):
    if not os.path.exists(apk):
        print('Could not find %s.' % apk)
        sys.exit(6)

    if 'Success' not in command("adb install -r %s" % apk)[0]:
        print('Install %d failed!' % apk)
        sys.exit(6)


installed_apks = {
    '4.3': [disableVerifyApps, setupAdmin, setupDevOptions]
}


def setup():
    for name in [CTSCONSOLE, COPYMEDIA]:
        if not os.path.exists(name):
            print("Error: %s desn't exist" % name)
            sys.exit(6)
        command("chmod 777 %s" % name)

    print "Copying media files to device..."
    os.chdir('cts_media')
    command("./copy_media.sh all")
    os.chdir(os.pardir)

    for func in installed_apks[androidVersion]:
        func()


if __name__ == "__main__":
    setup()
